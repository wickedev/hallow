export class GreeterStub {
  private readonly greetingResource: Resource<IGreetingResponse>;
  private readonly sayHelloResource: Resource<number>;

  constructor(private readonly client: IClient) {
    this.greetingResource = new Resource(this.greeting.bind(this));
    this.sayHelloResource = new Resource(this.sayHello.bind(this));
  }

  greeting(request: IGreetingRequest): Promise<IGreetingResponse> {
    return new Promise<IGreetingResponse>((resolve, reject) => {
      grpc.unary(Greeter.Greeting, {
        host: this.client.host,
        debug: false,
        onEnd: createUnaryOnEndHandler(resolve, reject),
        request: GreetingRequest.create(request),
      });
    });
  }

  sayHello(): Promise<number> {
    return new Promise<number>((resolve, reject) => {
      grpc.unary(Greeter.SayHello, {
        host: this.client.host,
        debug: false,
        onEnd: createUnaryOnEndHandler(resolve, reject),
        request: new Empty(),
      });
    });
  }

  useGreeting(request: IGreetingRequest): Resource<IGreetingResponse> {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    this.greetingResource.forceUpdate = useForceUpdate();
    this.greetingResource.arguments = [request];

    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(() => {
      if (this.greetingResource.mustBeIgnored) {
        this.greetingResource.mustBeIgnored = false;
      } else {
        this.greetingResource.mustBeIgnored = true;
        this.greetingResource.arguments = [request];
        this.greetingResource.refresh();
      }
    }, [request]);

    return this.greetingResource;
  }

  useSayHello(): Resource<number> {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    this.sayHelloResource.forceUpdate = useForceUpdate();
    this.sayHelloResource.arguments = [];

    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(() => {
      if (this.sayHelloResource.mustBeIgnored) {
        this.sayHelloResource.mustBeIgnored = false;
      } else {
        this.sayHelloResource.mustBeIgnored = true;
        this.sayHelloResource.arguments = [];
        this.sayHelloResource.refresh();
      }
    }, []);

    return this.sayHelloResource;
  }
}
